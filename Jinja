{% with dag_id=dagId, dag_properties=dagProperties, default_args=defaultArgs, description=description %}
with models.DAG(
    '{{ dag_id }}',
    {% for key, value in dag_properties.items() %}
        {% if key == 'Timetable' %}
            {{ key }}={{ value }}(Runtime="{{ dag_properties['Runtime'] }}"),
        {% elif key == 'Runtime' %}
            {# Skip Runtime since it's used with Timetable #}
        {% elif value.lower() == 'true' or value.lower() == 'false' %}
            {{ key }}={{ value.lower() }},
        {% else %}
            {{ key }}={{ value }},
        {% endif %}
    {% endfor %}
    {% if default_args != 'None' %}
        default_args={{ default_args }},
    {% endif %}
    {% if description %}
        description="{{ description }}",
    {% else %}
        description="Beamx generated dag",
    {% endif %}
) as dag:
    # Define your tasks here
{% endwith %} 



from jinja2 import Template

# Load the Jinja template
with open("dag_template.jinja", "r") as file:
    template_content = file.read()

# Define sample data
context = {
    "dagId": "example_dag",
    "dagProperties": {
        "Timetable": "NextRun_Plugin",
        "Runtime": "23:25",
        "max_active_runs": "1",
        "catchup": "false",
        "schedule_interval": "'@daily'"
    },
    "defaultArgs": {
        "owner": "airflow",
        "retries": 1
    },
    "description": "Test DAG generated by Beamx"
}

# Render the template
template = Template(template_content)
rendered_dag = template.render(context)

# Save rendered DAG to a file
with open("generated_dag.py", "w") as output_file:
    output_file.write(rendered_dag)

print("DAG generated successfully! Check 'generated_dag.py'")
